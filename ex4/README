ohadcn

=================
===basic usage===
=================

==Introduction==

DNA is composed of 4 elements that can be regarded as letters (A, G, C and T). Combinations of these
letters form a language. In man-speaking languages, a word is a combination of letters and each order
generates a different meaning, if at all (for example “dog” and “god”). In a similar manner, combinations
of the DNA letters create different words. However, the DNA is one long sequence without “spaces” and
it is composed of “sub-words” which reside along the long sequence. These sub-words can be divided
into several groups; among them are “silencers” and “enhancers” (the rest of the sequence is referred
below as “neutral”). If silencers are present, some segments of the genes will be excluded while
enhancers’ presence will induce their inclusion. Genes also have special position called “Splicing
Junctions”. Apparently, the distance of the enhancer\silencer from the junction also contributes to the
extent of its effect.
The interplay between these two groups determines the overall effect on the sequence. Hence, in order
to predict the fate of a given sequence, one should search for these special subsequences along the
input sequence, and consider the distance from the splicing junction and the subsequence identity.

==goal==

This application provides a graphic display of enhancers and silencers on a DNA segments. The main task
is to search for sub-words within one long sequence (given as input from the user), and to calculate an
overall score that aims to predict the sequence fate. After clicking on a “Search and compute” button, a
result section at the end of the page present the search results and the computed total score.

==execution==
to execute this program you should open the file ex4.html in your browser (e,g:firefox), enter a DNA sequence,
the position of the Splicing Junction in the sequence, lists of enhancers and silencers and the score for the
enhancers and the silencers.

in addition you can tell the program to reffer only to the enhancers or only the silencers, or to look in the
reversed sequence as well.

============
===design===
============

==   html files   ==
i  used only one html file: called ex4.html, the basic structure of the page is all built in this file.
i tried as far as i can to use html5 semantic tags, the w3 HTML validator give me 1 warning for using experimental
features, so if you use it to evaluate my code please ignore it, as it's not a fault of mine.

==   css files    ==
all the style is given in one css file, called style.css, any changes to the apearance can be done in that file.

==javascript files==
	during the writing of this excersise i tried to use classes and objective-javascript, so some files contains
	extentions to existing javascript objects.

	=element.js=
	this file contain additions to javascript Element object, and some other functions that do affect elements

	=string.js=
	this file contains methods for manipulating strings, all of them added to String.prototype so can be used easily

	=setInput.js=
	this file was given by the course stuff, submitted unchanged.

	=inputValidator.js=
	holds the method validateInput() that validates the legality of all input fields.
	
	=seqFinder.js=
	it's man application is the method findSequences() that finds the sequences in the inputs, and perform the main 
	data processing of this tool.


=================
===final notes===
=================

a)search algorythm
the search algorythm is based on javascript indexOf() method, the all proccess look like this:
	1)print the sequence and give each letter in the sequence a uniqe id, with an appendix and it's position in the
	sequence.
	2)find the occurance of enhancer or silencer in the sequence (using String.indexOf() method)
	3)then mark letters in sequence, as the size of the enhancer/silencer and starting at the index of the found
	enhancer/silencer.
	4)calculate the score of the found enhancer/silencer, using the index found.
	5)repeat 2-5, but next time start at position of the found index+1.


b)simplifing assumptions
	this implementation work without any simplifing assumptions, if an enhancer or a silencer is starting while the
	other enhancer is not finished yet, the code just continue and mark the overlapping characters second time,
	and continue to the new characters, at the end of the match.
	
	example:
	consider the following situation: sequence is "ctctctagctag", and one of the enhancers is "ctct", the script
	will run as follow:
	1)look for "ctct" in the sequence - found at position 0 - mark four (enhancer length) characters,
	starting at character 0.
	2)look for "ctct", but now start at position (0+1)=1 - found at position 2 - mark four characters, from position 2.
	3)look for "ctct" starting at position (2+1)=3 - not found - exit.
	
c)data structures/classes
the only interesting class i used is elementError in the inputValidator file, objects of this class holds two fields:
	1)"empty":this field holds the error that needs to be displayed in the erro section if the element is empty
	2)"valFunc":this field holds a reference to a function that can be used to validate the legality of the input
	in this field, and returns the relevant error message if the input is not valid.
	a list of element of this type is used to test the legality of all the elements in the page.